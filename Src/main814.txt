SPI
SPI2: Master, Polling送信
SPI3: Slave, 割り込み受信


#include "main.hpp"
#include "stm32f4xx_hal.h"
#include "LED.hpp"
#include "LED_PWM.hpp"
#include "PWMController.hpp"
#include "SPI_Master.hpp"
#include "SPI_Slave.hpp"
#include "UART_Handler.hpp"
#include "ThreePhasePWM.hpp"
#include <cstdio>


extern TIM_HandleTypeDef htim1; // 3相PWMに使うタイマ
extern TIM_HandleTypeDef htim2; // 1相PWMに使うタイマ
extern TIM_HandleTypeDef htim7; // 割り込み用タイマ
extern UART_HandleTypeDef huart2;
extern SPI_HandleTypeDef hspi2;  // SPI2 = Master
extern SPI_HandleTypeDef hspi3;  // SPI3 = Slave


// 送受信バッファ例
uint8_t masterTx[5] = { 10, 20, 30, 40, 50};
uint8_t masterRx[5] = { 0 };
uint8_t slaveTx[5]  = { 1, 2, 3, 4, 5};
uint8_t slaveRx[5]  = { 0 };


// ---- LED_PWM ----
LED_PWM led_pwm(&htim2, TIM_CHANNEL_1);

// ---- ThreePhasePWM ----
ThreePhasePWM phaseUVW(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);

// ---- LED ----
LED led1(GPIOA,GPIO_PIN_5);

// ---- UART ----
UART_Handler uartCommunication(&huart2);

// ---- SPI Master ----
SPI_Master spiMaster(&hspi2, GPIOB, GPIO_PIN_12, &uartCommunication);
// SPI2のCSピンをLEDとして使用
// SPI_Masterのコンストラクタは、SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin, LED* led
// ここで、SPI2のCSピンをGPIOBのピン12に設定し、LEDとして使用します。
// SPI_Masterのインスタンスを作成します。SPI2を使用し、CSピンはGPIOBのピン12を使用します。

// ---- SPI Slave ----
SPI_Slave spiSlave(&hspi3, &uartCommunication, &led1);

// ---- 割り込みハンドラ ----
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim->Instance == TIM2)
    {
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
    }
    if (htim == &htim7)
    {
        led_pwm.update();  // PWMのdutyをテーブルに従って更新
        phaseUVW.update();
    }
}

// SPI送受信完了コールバック
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
    if (hspi->Instance == SPI3) // スレーブ側
    {
        // UARTでスレーブ受信表示
        char buf[64];
        sprintf(buf, "[Slave] Rx: %d %d %d %d %d\r\n",
                slaveRx[0], slaveRx[1], slaveRx[2], slaveRx[3], slaveRx[4]);
        HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), 100);

        // 次回送信データを更新
        for (int i = 0; i < 5; i++) {
            slaveTx[i] = slaveRx[i] + 1;
        }


        // 次の受信を開始（再エントリ）
        HAL_SPI_TransmitReceive_IT(&hspi3, slaveTx, slaveRx, 5); // HAL_SPI_TransmitReceive(&hspi3, slaveTx, slaveRx, 5, HAL_MAX_DELAY);
    }
    // if(hspi->Instance == SPI2) {
    //     spiMaster.onTransmitReceiveComplete_Callback();
    // }
    // else if(hspi->Instance == SPI3) {
    //     spiSlave.onReceiveTransmitComplete_Callback();
    // }
}

// SPIエラーコールバック
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
    if(hspi->Instance == SPI2) {
        spiMaster.masterError_Callback();
    }
    else if(hspi->Instance == SPI3) {
        spiSlave.slaveError_Callback();
        HAL_SPI_Abort(hspi); // 一旦停止
        HAL_SPI_TransmitReceive_IT(&hspi3, slaveTx, slaveRx, 5); // 再開
    }
}


// ---- setupとloop ----
// setupは初期化、loopはメインループ
void setup()
{
    // LED
    led1.off();

    // PWM
    led_pwm.start(); // PWMを開始
    phaseUVW.start(); // 3相PWMを開始

    // 送信データを更新（例として +1 してみる）
    for (int i = 0; i < 5; i++) {
        slaveTx[i] = i+1;
    }
    for (int i = 5; i >0; i--) {
        slaveRx[i] = i-1; // 受信データをシフト
    }

    // // SPI Slave 受信開始
    // spiSlave.beginReceiveTransmit(slaveTx, slaveRx, 5); // SPIスレーブの受信開始

    // スレーブの初回受信開始
    HAL_SPI_TransmitReceive_IT(&hspi3, slaveTx, slaveRx, 5);


    // // SPI Master 送信開始
    // spiMaster.beginTransmitReceive(masterTx, masterRx, 5); // SPIマスターの送信開始

    // UARTで初期化メッセージを送信
    uartCommunication.sendMessage("UART Initialized\r\n");

    // タイマ割り込み開始
    // HAL_TIM_Base_Start_IT(&htim7);
}

void loop(){ 
    // led_pwm.update();
    // HAL_Delay(100); // dutyが徐々に変化するのを観察
    // led1.toggle(); 
    // led1.on(); // LEDを点灯
    // HAL_Delay(1000); // 1秒待機
    // led1.off(); // LEDを消灯
    // HAL_Delay(1000); // 1秒待機

    uartCommunication.sendMessage("Hello, KIRATO4.0!\r\n"); // UARTで文字列を送信
    // HAL_Delay(10000); // 10秒待機

    // --- マスター送受信 ---
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // CS Low
    HAL_SPI_TransmitReceive(&hspi2, masterTx, masterRx, 5, 100); // HAL_SPI_TransmitReceive(&hspi2, masterTx, masterRx, 5, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // CS High
    
    char buf[64];
    sprintf(buf, "Master Rx: %d %d %d %d %d\r\n", 
            masterRx[0], masterRx[1], masterRx[2], masterRx[3], masterRx[4]);
    uartCommunication.sendMessage(buf);

    // 次の送信データを変更（デバッグ用）
    for (int i = 0; i < 5; i++) masterTx[i]++;

    HAL_Delay(1000); // 1秒ごとに送信
    
}

